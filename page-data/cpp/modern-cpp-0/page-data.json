{"componentChunkName":"component---src-templates-blog-post-js","path":"/cpp/modern-cpp-0/","result":{"data":{"site":{"siteMetadata":{"title":"Freckie et al.","author":"Freckie","siteUrl":"https://blog.frec.kr","comment":{"disqusShortName":"","utterances":"freckie/freckie.github.io"},"sponsor":{"buyMeACoffeeId":"freckie"}}},"markdownRemark":{"id":"24084d9e-4f50-5aa5-b8db-a4e2f9fe90d1","excerpt":"Smart Pointer C++에서 제공하는 동적 메모리 할당&해제는 분명히 장점도 있지만, 프로그래머의 실수로 인해 심각한 버그를 초래할 수 있다. Java 등과 같은 언어는 Garbage Collection 기능을 지원해 자동으로 메모리 할당&해제를 도와주며, 이는 C++의 메모리 관리에 비해 편리함이 자명하다. 따라서 Garbage Collection의 필요성이 C++에서도 대두되었고 그 결과 탄생한 것이 Smart Pointer…","html":"<h2 id=\"smart-pointer\" style=\"position:relative;\"><a href=\"#smart-pointer\" aria-label=\"smart pointer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Smart Pointer</h2>\n<p>C++에서 제공하는 동적 메모리 할당&#x26;해제는 분명히 장점도 있지만, 프로그래머의 실수로 인해 심각한 버그를 초래할 수 있다.</p>\n<p>Java 등과 같은 언어는 <em>Garbage Collection</em> 기능을 지원해 자동으로 메모리 할당&#x26;해제를 도와주며, 이는 C++의 메모리 관리에 비해 편리함이 자명하다.</p>\n<p>따라서 <em>Garbage Collection</em>의 필요성이 C++에서도 대두되었고 그 결과 탄생한 것이 <strong><em>Smart Pointer</em></strong> 개념이다.</p>\n<p>스마트 포인터는 소멸될 때, 소유하고 있던 객체를 소멸시켜 메모리 누수 및 의도치 않은 상황을 방지한다.</p>\n<p>이렇게 <em>Dangling Pointer</em> 위험성도 해결할 수 있다는 것이 스마트 포인터 사용의 장점이 될 수 있을 것이다.</p>\n<p>C++11 이전에 있던 스마트 포인터는 auto_ptr이 있었지만 사용 상에 여러 제약이 있어 폭넓게 사용되진 못했다고 한다.</p>\n<p>(C++11에서 deprecated, C++17에서 removed)</p>\n<p>C++11 이후에 추가된 스마트 포인터는 <code class=\"language-text\">unique_ptr</code>, <code class=\"language-text\">shared_ptr</code>, <code class=\"language-text\">weak_ptr</code>이 있으며 이번 포스팅에서는 <code class=\"language-text\">unique_ptr</code>을 다룰 것이다.</p>\n<h2 id=\"stdunique_ptr\" style=\"position:relative;\"><a href=\"#stdunique_ptr\" aria-label=\"stdunique_ptr permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>std::unique_ptr</h2>\n<p><code class=\"language-text\">unique_ptr</code>은 포인터의 <strong>독점적인 소유권</strong>을 가진 객체이다.</p>\n<p>즉, 하나의 대상 포인터를 여러 개의 <code class=\"language-text\">unique_ptr</code>이 소유할 수 없다.</p>\n<p>대상 포인터를 소유하던 <code class=\"language-text\">unique_ptr</code>이 소멸될 때, 포인터를 소멸시킨 후에 <code class=\"language-text\">unique_ptr</code>이 소멸된다.</p>\n<p>(<code class=\"language-text\">shared_ptr</code>의 경우에는 모든 <code class=\"language-text\">shared_ptr</code>이 소멸되어야 대상 포인터가 소멸된다.)</p>\n<p>unique_ptr을 사용하기 위해서 <memory> 헤더를 인클루드 해준다.</p>\n<p>( 참고 : <code class=\"language-text\">auto_ptr</code>은 STL 컨테이너에 사용할 수 없었지만, <code class=\"language-text\">unique_ptr</code>은 STL 컨테이너에서도 사용 가능하다. )</p>\n<h2 id=\"생성\" style=\"position:relative;\"><a href=\"#%EC%83%9D%EC%84%B1\" aria-label=\"생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 생성자를 사용한 생성.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [컴파일 에러] 복사 생성자 금지.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token function\">ptr2</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [컴파일 에러] 대입 연산자 사용 금지.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr3 <span class=\"token operator\">=</span> ptr1<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [컴파일 에러] raw pointer 대입 금지.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// [C++14 기능] Factory 함수를 사용한 생성.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr5 <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제에서 볼 수 있듯이 <code class=\"language-text\">unique_ptr</code>은 <strong>복사 생성자, 대입 연산자(복사 지정)는 사용이 금지</strong>되어 있다.</p>\n<p>복사 생성자가 허용되었다면 같은 포인터에 대해 여러 <code class=\"language-text\">unique_ptr</code>이 소유하고 있다는 착각을 할 수 있기 때문에 금지되었다고 한다.</p>\n<p>Scott Meyers는 생성자를 사용해 생성하는 것보다, <strong>make_unique 함수를 통해 생성하는 것을 선호</strong>하라고 조언한다. 예외 안정성, 코드 중복 회피 측면에서 <code class=\"language-text\">make_unique</code> 함수가 낫다고 한다.</p>\n<p>( 출처 : Scott Meyers 저서 “Effective Modern C++” )</p>\n<h2 id=\"reset-및-release\" style=\"position:relative;\"><a href=\"#reset-%EB%B0%8F-release\" aria-label=\"reset 및 release permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reset 및 Release</h2>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pInt1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2017</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pInt2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>pInt1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 기존의 pInt1는 소멸되고 pInt2의 소유권을 가진다.</span>\nptr<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span>pInt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 기존의 pInt2는 소멸되고, 아무 것도 소유하지 않는다.</span>\nptr<span class=\"token punctuation\">.</span><span class=\"token function\">reset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>위 예제와 같이 다른 포인터의 소유권을 가져올 수 있다.\n만약 <code class=\"language-text\">reset</code> 함수에 파라미터가 주어지지 않는다면, 기존에 소유하던 포인터만 소멸시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pInt1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pInt2 <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">auto</span> ptr <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>pInt1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 소유권을 반환한다. (포인터 소멸X)</span>\npInt2 <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>pInt2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [결과] : 2018</span></code></pre></div>\n<p><code class=\"language-text\">release()</code> 함수를 통해 메모리 해제 없이 소유권만을 반환한다.</p>\n<h2 id=\"custom-deleter-커스텀-삭제자\" style=\"position:relative;\"><a href=\"#custom-deleter-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%82%AD%EC%A0%9C%EC%9E%90\" aria-label=\"custom deleter 커스텀 삭제자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Custom Deleter (커스텀 삭제자)</h2>\n<p><code class=\"language-text\">unique_ptr</code>이 소유하던 포인터를 소멸시킬 때, 그 객체를 delete 하는 방식으로 소멸시킨다.</p>\n<p>다른 방식의 소멸 구현이 필요할 때는 그 객체만을 위한 Deleter를 만들어 지정할 수 있다.</p>\n<p>Custom Deleter 는 <strong>Functor</strong>가 될 수도 있고, 아래 예제와 같이 <strong>Lambda 함수</strong>가 될 수도 있다.</p>\n<p>( 물론 <strong>함수 포인터</strong>도 가능하며 <code class=\"language-text\">std::function</code>도 사용 가능하다. )</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> deleter <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>Human<span class=\"token operator\">*</span> human<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> human<span class=\"token operator\">-></span>name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">delete</span> human<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Deleter를 지정한다.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span>Human<span class=\"token punctuation\">,</span> <span class=\"token keyword\">decltype</span><span class=\"token punctuation\">(</span>deleter<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token function\">ptr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> Human<span class=\"token punctuation\">,</span> deleter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>( 주의 : <code class=\"language-text\">std::make_unique</code>를 사용한 생성에는 Custom Deleter를 지정할 수 없음. )</p>\n<h2 id=\"데이터-접근\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%91%EA%B7%BC\" aria-label=\"데이터 접근 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 접근</h2>\n<p>이 스마트 포인터를 사용하다 보면 <code class=\"language-text\">unique_ptr</code>이 포인터를 소유하고 있는지 확인할 필요가 있을 것이다.</p>\n<p><code class=\"language-text\">unique_ptr::operator bool()</code> 이 정의되어 있기 때문에 다음과 같이 확인하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">std<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">else</span>\n  std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"데이터가 존재하지 않음.\\n\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>또한, <code class=\"language-text\">unique_ptr</code>이 가지고 있는 데이터에 접근할 때는 기존의 Raw Pointer 사용하던 것 처럼 <code class=\"language-text\">*</code>, <code class=\"language-text\">-&gt;</code> 연산자를 통해 접근하면 된다.</p>\n<h2 id=\"move-semantics\" style=\"position:relative;\"><a href=\"#move-semantics\" aria-label=\"move semantics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>move semantics</h2>\n<p>C++11에서 도입된 기능 중에 제일 중요한 기능이 <em>rvalue 참조</em>와 <em>move semantics</em> 라고 생각한다.</p>\n<p><code class=\"language-text\">unique_ptr</code>는 <em>rvalue</em>에 대해서는 대입 연산을 허용하고 있기 때문에 아래 예제와 같이 <code class=\"language-text\">std::move</code> 함수를 이용해서 <strong>소유권을 이동</strong>하는 것이 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">auto</span> ptr1 <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span>make_unique<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 소유권 이동. ptr1는 사용 불가.</span>\nstd<span class=\"token operator\">::</span>unique_ptr<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> ptr2 <span class=\"token operator\">=</span> std<span class=\"token operator\">::</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>references</h2>\n<p>Scott Meyers - ”<em>Effective Modern C++</em>”</p>\n<p><a href=\"https://msdn.microsoft.com/ko-kr/library/hh279676.aspx\">https://msdn.microsoft.com/ko-kr/library/hh279676.aspx</a></p>","frontmatter":{"title":"(C++11) std::unique_ptr","date":"January 05, 2018"}}},"pageContext":{"slug":"/cpp/modern-cpp-0/","previous":{"fields":{"slug":"/essay/essay-0/"},"frontmatter":{"title":"현대인의 인공지능 공포증","category":"Essay","draft":false}},"next":{"fields":{"slug":"/cpp/modern-cpp-1/"},"frontmatter":{"title":"(C++11) Range-Based for Loop","category":"C++","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}