{"componentChunkName":"component---src-templates-blog-post-js","path":"/cpp/modern-cpp-1/","result":{"data":{"site":{"siteMetadata":{"title":"킹명현 블로그","author":"Freckie","siteUrl":"https://blog.frec.kr","comment":{"disqusShortName":"","utterances":"freckie/freckie.github.io"},"sponsor":{"buyMeACoffeeId":"freckie"}}},"markdownRemark":{"id":"23d3d897-a0a0-533d-86b3-88a5f3acfd52","excerpt":"Python, Javascript 등 다른 언어에서 편하게 사용되던 for문을 C++에서도 사용할 수 있게 C++11에서 추가된 문법이 Range-Based for Loop (범위 기반 for 루프) 이다.   위와 같은 Python 코드를 C++로 구현하려면 기존에는 다음과 같아야 할 것이다.   새로운 for문을 사용하면 다음처럼 간결해진다.   Visual Studio 를 사용중인 경우에, for 구문의 it에 커서를 가져가면 다음과 같은 메세지가 띄워진다. (위의 두 가지 C…","html":"<p>Python, Javascript 등 다른 언어에서 편하게 사용되던 for문을 C++에서도 사용할 수 있게 C++11에서 추가된 문법이 <em>Range-Based for Loop (범위 기반 for 루프)</em> 이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">country_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"KOR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JPN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CHN\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> country <span class=\"token keyword\">in</span> country_list<span class=\"token punctuation\">:</span>\n <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같은 Python 코드를 C++로 구현하려면 기존에는 다음과 같아야 할 것이다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> li<span class=\"token punctuation\">{</span><span class=\"token string\">\"KOR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JPN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CHN\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// auto로 간결하게 사용 가능</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">::</span>iterator it <span class=\"token operator\">=</span> li<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> li<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span>\n cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span></code></pre></div>\n<p>새로운 for문을 사용하면 다음처럼 간결해진다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> li<span class=\"token punctuation\">{</span><span class=\"token string\">\"KOR\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"JPN\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CHN\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it <span class=\"token operator\">:</span> li<span class=\"token punctuation\">)</span>\n cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Visual Studio 를 사용중인 경우에, for 구문의 it에 커서를 가져가면 다음과 같은 메세지가 띄워진다. (위의 두 가지 C++ 예제가 동치라는 것을 알 수 있다.)  </p>\n<p><code class=\"language-text\">std::string it</code></p>\n<p><code class=\"language-text\">for(vector&lt;string&gt;::iterator it = li.begin(); it!=li.end(); ++it)</code></p>\n<p>이 문법을 사용할 때 주의할 점이 있기는 한데,\n당연하게도 예제에서 <code class=\"language-text\">auto it</code> 과 같이 for문에서 정의한 변수는 for문 바깥에서 사용할 수 없다.\n만약 for문을 통해 단순히 값에 접근이 아니라 수정을 하고 싶다면 다음과 같이 레퍼런스로 받아오면 된다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> li<span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it <span class=\"token operator\">:</span> li<span class=\"token punctuation\">)</span>\n it <span class=\"token operator\">=</span> it <span class=\"token operator\">*</span> it<span class=\"token punctuation\">;</span></code></pre></div>\n<p>(MSDN에 의하면) 새로운 for문은 다음 조건을 통해 <em>iterable</em>한 객체를 인식한다.  </p>\n<ul>\n<li>배열을 자동으로 인식</li>\n<li><code class=\"language-text\">begin()</code>, <code class=\"language-text\">end()</code>를 가지고 있는 객체를 인식</li>\n</ul>\n<p>사용자가 정의한 class를 이 문법으로 사용 가능하게 하려면, class의 멤버 함수로 <code class=\"language-text\">begin()</code>, <code class=\"language-text\">end()</code>를 만들어주어야 하며,\n<em>iterator</em>에서는 <code class=\"language-text\">operator++</code>, <code class=\"language-text\">operator!=</code>, <code class=\"language-text\">operator*</code>를 구현해야 한다.</p>","frontmatter":{"title":"(C++11) Range-Based for Loop","date":"2018년 01월 30일 작성","series":null}}},"pageContext":{"slug":"/cpp/modern-cpp-1/","previous":{"fields":{"slug":"/cpp/modern-cpp-0/"},"frontmatter":{"title":"(C++11) std::unique_ptr","category":"C++","draft":false}},"next":{"fields":{"slug":"/python/call-by-value-or-reference/"},"frontmatter":{"title":"(번역글) Python은 call-by-value일까, call-by-reference일까?","category":"Python","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}