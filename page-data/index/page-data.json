{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"킹명현 블로그","configs":{"countOfInitialPost":10}}},"allMarkdownRemark":{"edges":[{"node":{"excerpt":"문제 상황  표면적으로 보이던 에러 상황 프론트엔드에서 로의 모든 request가 404 에러 발생 request가 도착해야할 pod에 어떠한 로그도 찍히지 않았다. 다만, ingress-nginx-controller 로그에는 request가 도착했고 404를 돌려줬다는 로그가 찍혔다. 여기서, 다음 상황이라고 추측했다. 원인 추적 Ingress를 살짝 …","fields":{"slug":"/troubleshooting/ingress_nginx_regex/"},"frontmatter":{"date":"2024년 02월 18일","title":"Ingress에 정의된 path에 regex 사용시 라우팅되지 않던 이슈","category":"Troubleshooting","draft":false}}},{"node":{"excerpt":"스프링 배치 메타데이터 스프링 배치에서는 과 의 실행 상태, 파라미터, 컨텍스트 등을 관리하기 위해 메타데이터 테이블을 필요로 한다. 1 메타데이터 엔티티들은 , , ,  등이 있고, 이들을 관리하는 테이블들은 총 6개로 다음과 같다.  : Job이 실행될 때마다 생성된 JobInstance  : JobInstance의 시작/종료 시간, 상태, 종료 메세…","fields":{"slug":"/spring/spring-batch-5-metadata-db/"},"frontmatter":{"date":"2023년 05월 26일","title":"Spring Batch 5.0에서 배치용 메타데이터 DB와 서비스 DB 분리하기","category":"Spring","draft":false}}},{"node":{"excerpt":"문제점 Python 3.8에서 추가된  모듈의 를 사용하는 경우, SharedMemory를 사용하던 프로세스가 종료되었을 때, 연결된 공유 메모리 블록까지 릴리즈되어 다른 프로세스에서 사용이 불가능한 문제 발생한다. SharedMemory 세그먼트를 프로세스의 종료와 관계 없이 유지하는 시나리오도 존재할 수 있지만, 파이썬에서는 memory leak로 판…","fields":{"slug":"/troubleshooting/py_shm_unlink/"},"frontmatter":{"date":"2022년 10월 28일","title":"파이썬 SharedMemory 사용 시 자동으로 unlink가 호출되는 문제","category":"Troubleshooting","draft":false}}},{"node":{"excerpt":"요약 Hash Table에서 해시 충돌(Hash Collision)에 대한 해결책으로 Open Addressing, Separate Chaining 등이 있다. Go에서는 Separate Chaining 방법으로 구현되어 있는데, 이 방법은 링크드 리스트와 같이 버킷의 엔트리에 엔트리를 붙이는 방법이다. 링크드 리스트나 트리의 구조로 chaining을 수…","fields":{"slug":"/golang/go-hashtable-0/"},"frontmatter":{"date":"2022년 04월 07일","title":"Go에서 해시 테이블(Map)은 어떻게 구현되어 있을까?","category":"GoLang","draft":false}}},{"node":{"excerpt":"이 포스팅은 Marko Lukša의 Kubernetes in Action (1st edition)에서 Chapter 5. Services: Enabling Clients to Discover and Talk to Pods를 기반으로 재구성하였습니다. 서비스에 관련된 내용은 총 3편의 시리즈로 포스팅할 예정입니다. 들어가기 전에 지난 포스팅에서는 서비스라는…","fields":{"slug":"/cloud/service_2/"},"frontmatter":{"date":"2021년 07월 29일","title":"쿠버네티스 서비스 2 | 쿲벖넶팂슶 Ep.4","category":"Cloud","draft":false}}},{"node":{"excerpt":"이 포스팅은 Marko Lukša의 Kubernetes in Action (1st edition)에서 Chapter 5. Services: Enabling Clients to Discover and Talk to Pods를 기반으로 재구성하였습니다. 서비스에 관련된 내용은 총 3편의 시리즈로 포스팅할 예정입니다. 쿠버네티스 서비스 1 쿠버네티스 서비스 2…","fields":{"slug":"/cloud/service_1/"},"frontmatter":{"date":"2021년 07월 26일","title":"쿠버네티스 서비스 1 | 쿲벖넶팂슶 Ep.3","category":"Cloud","draft":false}}},{"node":{"excerpt":"수정사항 2021.07.24 21:16 :: 제목 수정, 일부 잘못된 내용 삭제, 주석 수정 NodePort 쿠버네티스 기본 세팅에서 NodePort는 - 범위 내에서 할당된다. 1 이렇게 세팅된 이유는 다음 충돌이 예상되기 때문이다. 2 노드가 실제로 사용하는 포트와 충돌할 수 있음. (예로 번 포트 등) pod host 포트와 충돌할 수 있음. , ,…","fields":{"slug":"/cloud/modify_nodeport_range/"},"frontmatter":{"date":"2021년 07월 23일","title":"쿠버네티스 NodePort 할당 범위 변경하기","category":"Cloud","draft":false}}},{"node":{"excerpt":"1. What is etcd? distributed reliable key-value store :   + istributed system (“엣-시디”로 읽음) 분산 시스템의 운영에 필요한 데이터를 관리하는 용도로 사용된다. 클러스터 구성을 위해 election, consensus(Raft) 등을 처리하고 관련 설정값을 관리한다. CNCF(Cloud N…","fields":{"slug":"/cloud/etcd/"},"frontmatter":{"date":"2021년 06월 30일","title":"etcd에 대해 알아보자 | 쿲벖넶팂슶 Ep.2","category":"Cloud","draft":false}}},{"node":{"excerpt":"소개 쿠버네티스 공식 문서에서는 애플리케이션 배포 방법에 따라 3개의 시대로 나눈다. 전통적인 배포 시대(Traditional deployment era), 가상화된 배포 시대(Virtualized deployment era), 컨테이너 개발 시대(Container deployment era). https://d33wubrfki0l68.cloudfront…","fields":{"slug":"/cloud/kubernetes_1/"},"frontmatter":{"date":"2021년 06월 03일","title":"쿠버네티스 | 쿲벖넶팂슶 Ep.1","category":"Cloud","draft":false}}},{"node":{"excerpt":"수정사항 2021.03.09 13:48 :: calico, flannel 설치 명령 오타 수정 2021.03.17 13:22 :: flannel 제외 2021.03.29 16.24 :: kubeadm init 시 pod-network-cidr 옵션 추가, calico 대신 flannel 설치 환경 호스트 서버 Ubuntu 18.04 VirtualBox V…","fields":{"slug":"/cloud/virtualbox_k8s/"},"frontmatter":{"date":"2021년 03월 08일","title":"VirtualBox로 가상머신 만들어 Kubernetes 클러스터 구성하기","category":"Cloud","draft":false}}},{"node":{"excerpt":"들어가기 전에 우선 서버리스는 문자 그대로 서버가 없다는 뜻은 전혀 아니다. 서버에 대해 고려를 할 필요가 없는 구조라고 이해하는 것이 좋다. 서버리스라는 단어는 실제 이 아키텍처를 함축한 단어로는 적합하지 않고, 오히려 상술에 가까운 말이라고 생각한다. 다만 용어가 가지는 파급력과 간결함 때문에 논문에도 자주 등장하며 이 아키텍처를 표현하는 단어로 곧잘…","fields":{"slug":"/cloud/serverless_and_cold_start/"},"frontmatter":{"date":"2021년 02월 18일","title":"서버리스 아키텍처(Serverless Architecture)와 콜드 스타트(Cold Start)","category":"Cloud","draft":false}}},{"node":{"excerpt":"※ 주의 본 포스팅 시리즈는 제가 빠르게 찾아볼 수 있도록 개인적으로 공부하면서 정리했으며, 조사가 미흡해 오류가 있을 수 있습니다. Go Go언어는 구글의 로버트 그리즈머(Robert Griesemer), 롭 파이크(Rob Pike), 켄 톰슨(Ken Thompson)에 의해 개발되었다. 롭 파이크의 말에 의하면 대규모 소프트웨어 서비스를 제작하고 읽고…","fields":{"slug":"/golang/bible-0/"},"frontmatter":{"date":"2020년 08월 07일","title":"나만의 Golang 바이블 | Ep. 0","category":"GoLang","draft":false}}},{"node":{"excerpt":"Docker Network 도커 컨테이너는 기본적으로 ,  인터페이스를 가지고 있다. 각 컨테이너의 에는  대역의 IP가 할당되는데, 이 대역은 호스트 내부의 사설 IP이므로 외부에서 접속이 불가능하다. 그래서 도커 엔진에서는 호스트에  라는 가상 네트워크 인터페이스를 만들고, 각 컨테이너의 와 연결한다. 이때,  인터페이스들은 호스트의  브릿지에 바인딩…","fields":{"slug":"/docker/docker_network/"},"frontmatter":{"date":"2020년 07월 24일","title":"Docker Network 간단 정리","category":"Docker","draft":false}}},{"node":{"excerpt":"라즈베리파이로 유선 사설 네트워크 구축할때, 인터페이스 두 개(, )를 브릿지로 묶어 구성했었다. Worker(RPi #1, #2)들의 IP는 DHCP 설정한대로  대역을 할당받았지만,  브릿지에 묶인 , 는  대역의 IP를 가지고 있었다.    169.254.0.0/16 IETF에 따르면, 과  에 할당됐던  대역의 IP 주소는 DHCP 서버를 찾을 수…","fields":{"slug":"/networking/link-local-address/"},"frontmatter":{"date":"2020년 07월 22일","title":"169.254.x.x :: Link-Local Addresses","category":"Networking","draft":false}}},{"node":{"excerpt":"DHCP (Dynamic Host Configuration Protocol) TCP/IP 통신을 위해 필요한 설정 정보를 할당/관리하기 위한 프로토콜이다. 7계층에 위치한 프로토콜로 UDP 기반으로 통신한다. 동작은 다음과 같은 순서로 이루어진다. DHCP Discover 클라이언트에서 Broadcast로 IP 할당 요청을 한다. DHCP Offer 서버…","fields":{"slug":"/networking/dhcp/"},"frontmatter":{"date":"2020년 07월 17일","title":"DHCP 간단 정리","category":"Networking","draft":false}}},{"node":{"excerpt":"수정사항 2020-07-18 01:50 :: 누락되었던 bridge 설정 섹션 추가 2020-07-21 14:48 :: Goal 이미지 추가, 결과 이미지 추가, 순서 일부 변경 2020-12-14 02:50 :: 설명 한 줄 추가 Goal 🏀    외부 AP와 연결된 RPi #0은 일종의 유선 공유기 역할로, Worker들이 eth로 연결 시 IP 주소…","fields":{"slug":"/networking/rpi-wired-router/"},"frontmatter":{"date":"2020년 07월 17일","title":"Raspberry Pi as a Wired Router","category":"Networking","draft":false}}},{"node":{"excerpt":"Tiobe 랭킹에 따르면 GoLang은 2020년 3월 기준으로 10위에 랭크되어있다. 많은 사용자가 있고 GoLang으로 작성된 프로젝트도 상당히 많아진만큼 괜찮은 언어임에는 이견이 없지만.. 사용에 있어서 언어 자체가 괜찮은 것과는 달리 큰 문제점이 있다. 바로 레퍼런스의 부족이다. 한글 문서의 부족은 말할 것도 없고, 심지어 영어 문서도 부족한 경우…","fields":{"slug":"/golang/goquery/"},"frontmatter":{"date":"2020년 03월 20일","title":"goquery를 이용해서 html 파싱하기","category":"GoLang","draft":false}}},{"node":{"excerpt":"Golang missing Location in call to Time.In 에러 (go 1.12.1 버전 기준) GoLang으로 HTTP API를 개발 중이었다. API를 정적 바이너리로 빌드해서, scratch 이미지를 기반으로 Docker 이미지를 빌드해 사용 중이었는데, 다음과 같은 에러가 발생하면서 프로그램이 계속 죽었다.  함수는 timezon…","fields":{"slug":"/golang/troubleshooting-0/"},"frontmatter":{"date":"2020년 03월 19일","title":"missing Location in call to Time.In 에러","category":"GoLang","draft":false}}},{"node":{"excerpt":"1. 도커(Docker)란? 컨테이너 기반의 가상화 플랫폼이다. 2. 가상화(Virtualization) 물리 리소스를 추상화하여 사용자에게서 감추며, 여러 개의 논리 리소스인 것처럼 보이게 하는 기술이다.\n가상화 기술로는 VM과 Container 기술이 있다. 2.1. VM(Virtual Machine) 물리적 HW 리소스를 Hypervisor를 통해 …","fields":{"slug":"/docker/docker/"},"frontmatter":{"date":"2020년 03월 13일","title":"Docker 간단 정리","category":"Docker","draft":false}}},{"node":{"excerpt":"Visual Studio 2017 최근 버전에서 ‘Win32 콘솔 응용 프로그램’ 프로젝트가 새 프로젝트 생성 화면에서 사라졌다. (VS2017 15.3 버전 이상)      파일 > 새로 만들기 > 새 프로젝트를 누르면 나오는 창이다. 기존 버전에서는 이 목록에 ‘Win32 콘솔 응용 프로그램’이 있었는데 업데이트로 자취를 감췄다.      이제는 왼쪽…","fields":{"slug":"/cpp/vs2017-win32/"},"frontmatter":{"date":"2018년 03월 25일","title":"Visual Studio 2017에서 Win32 콘솔 응용 프로그램 프로젝트 만들기","category":"C++","draft":false}}},{"node":{"excerpt":"파이썬에서는 함수 파라미터 작동을 어떻게 하는지 찾아보다 괜찮은 글이 있어 가져와 보았다. ( 이글 댓글창에서도 의견이 분분하지만 적어도 내가 생각하는 바와 비슷해서 옮겨왔다. / 발번역 ) 출처 : https://jeffknupp.com/blog/2012/11/13/is-python-callbyvalue-or-callbyreference-neither/…","fields":{"slug":"/python/call-by-value-or-reference/"},"frontmatter":{"date":"2018년 03월 09일","title":"(번역글) Python은 call-by-value일까, call-by-reference일까?","category":"Python","draft":false}}},{"node":{"excerpt":"Python, Javascript 등 다른 언어에서 편하게 사용되던 for문을 C++에서도 사용할 수 있게 C++11에서 추가된 문법이 Range-Based for Loop (범위 기반 for 루프) 이다.   위와 같은 Python 코드를 C++로 구현하려면 기존에는 다음과 같아야 할 것이다.   새로운 for문을 사용하면 다음처럼 간결해진다.   Vi…","fields":{"slug":"/cpp/modern-cpp-1/"},"frontmatter":{"date":"2018년 01월 30일","title":"(C++11) Range-Based for Loop","category":"C++","draft":false}}},{"node":{"excerpt":"Smart Pointer C++에서 제공하는 동적 메모리 할당&해제는 분명히 장점도 있지만, 프로그래머의 실수로 인해 심각한 버그를 초래할 수 있다. Java 등과 같은 언어는 Garbage Collection 기능을 지원해 자동으로 메모리 할당&해제를 도와주며, 이는 C++의 메모리 관리에 비해 편리함이 자명하다. 따라서 Garbage Collectio…","fields":{"slug":"/cpp/modern-cpp-0/"},"frontmatter":{"date":"2018년 01월 05일","title":"(C++11) std::unique_ptr","category":"C++","draft":false}}},{"node":{"excerpt":"《터미네이터》, 《매트릭스》, 《바이센테니얼 맨》, 《트랜센던스》. 인공지능(AI)이 주제인 영화들이다. 문명이 산업 시대를 넘어 정보화 시대가 열리면서 컴퓨터의 연산 능력은 기하급수적으로 높아졌고, 인간은 인공적으로 유사 ‘지능’을 창조하기에 이르렀다. 여러 분야에서 인간보다 월등한 인공지능이 계속 발전을 거듭하였고, 이는 인류 문명에 위협이 된다고 생…","fields":{"slug":"/essay/essay-0/"},"frontmatter":{"date":"2017년 12월 13일","title":"현대인의 인공지능 공포증","category":"Essay","draft":false}}}]}},"pageContext":{}},"staticQueryHashes":["3128451518","521680639"]}